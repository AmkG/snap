
The I/O subsystem is represented by its own process.
This process accepts various I/O related commands.

The central I/O process parses the commands and feeds
them to another object, the central I/O object.  This
central I/O object is dependent on the exact
implementation.

Arc-side I/O objects are really annotated PID's.
The processes handled by the PID's themselves handle
an opaque "basic" I/O object.  These opaque objects
are passed to the central I/O process via message;
the central I/O process itself does not know the
format of the basic I/O object.  The format of the
I/O objects is dependent on the central I/O object.

The message sent to the central I/O process is a
command of one of the following forms:

('read tag pid portdata)
	; reads from the I/O object
	; response data is a 'binary object
	; can respond with 'eof

('write tag pid portdata data)
	; writes data to the I/O object
	; data is a 'binary object
	; response data is a 'binary object containing the
	; remaining data that was not yet written.
	; can respond with 'eof

('open tag pid file dir)
	; opens a file on the filesystem
	; file is a 'string
	; dir is an integer composed of the
	;   bitwise or of the following:
	;     1 - open for reading
	;     2 - open for writing
	;     4 - truncate if present
	;     8 - create if absent
	;     16 - set file pointer to end
	;     32 - don't create if present
	; response data is a portdata object

('stdin tag pid)
	; response data is a portdata object
	; representing stdin

('stdout tag pid)
	; response data is a portdata object
	; representing stdout

('stderr tag pid)
	; response data is a portdata object
	; representing stderr

Message replies can be either a 'response or a 'err
response:

('err ,tag e)
	; specifies an error e occured

('response ,tag data)
	; specifies that the request succeeded.
	; the exact format of data above depends on
	; the command

Some requests also have:

('eof ,tag)
	; specifies that an end of file condition
	; occured (i.e. EOF on terminal, or closed
	; other end of pipe)

